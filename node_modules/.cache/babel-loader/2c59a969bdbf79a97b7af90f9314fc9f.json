{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/Philip/Desktop/FlatIron/Projects/Portfolio_Planner/frontend/src/containers/CompanySearchContainer.js\";\nimport React, { Component } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { CompanySearchForm } from '../components/CompanySearchForm';\nimport CompanyCard from '../components/CompanyCard';\nimport { connect } from 'react-redux';\nimport { getPortfolio } from '../redux/actionCreator'; // Have to figure out how to get routed page to render.\n\nconst apiKey = process.env.API_KEY;\n\nclass CompanySearchContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      symbol: \"\",\n      searchResultsList: [],\n      validated: false,\n      initialRender: false\n    };\n\n    this.handleSearchFormChange = event => {\n      this.setState({\n        symbol: event.target.value\n      });\n    };\n\n    this.handleSearchFormSubmit = event => {\n      const form = event.currentTarget;\n\n      if (form.checkValidity() === false && this.state.symbol === '') {\n        event.preventDefault();\n        event.stopPropagation();\n      } else {\n        event.preventDefault();\n        fetch(`https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${this.state.symbol}&apikey=${apiKey}`).then(res => res.json()).then(data => {\n          const companies = Object(data.bestMatches);\n          this.setState({\n            searchResultsList: companies,\n            validated: true\n          });\n        });\n      }\n    };\n  }\n\n  renderCompanyList() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: this.state.searchResultsList.map(company => /*#__PURE__*/_jsxDEV(CompanyCard, {\n        id: uuidv4(),\n        companySymbol: company[\"1. symbol\"],\n        companyName: company[\"2. name\"],\n        companyType: company[\"3. type\"],\n        companyRegion: company[\"4. region\"],\n        companyCurrency: company[\"8. currency\"] // company={company[\"1. symbol\"]}\n\n      }, uuidv4(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 21\n      }, this))\n    }, void 0, false);\n  }\n\n  componentDidMount() {\n    if (this.state.initialRender === false) {\n      this.props.getPortfolio();\n      this.setState({\n        initialRender: true\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CompanySearchForm, {\n        onSubmit: this.handleSearchFormSubmit,\n        validated: this.state.validated,\n        value: this.state.symbol,\n        onChange: this.handleSearchFormChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.renderCompanyList()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default connect(null, {\n  getPortfolio\n})(CompanySearchContainer);","map":{"version":3,"sources":["/Users/Philip/Desktop/FlatIron/Projects/Portfolio_Planner/frontend/src/containers/CompanySearchContainer.js"],"names":["React","Component","v4","uuidv4","CompanySearchForm","CompanyCard","connect","getPortfolio","apiKey","process","env","API_KEY","CompanySearchContainer","state","symbol","searchResultsList","validated","initialRender","handleSearchFormChange","event","setState","target","value","handleSearchFormSubmit","form","currentTarget","checkValidity","preventDefault","stopPropagation","fetch","then","res","json","data","companies","Object","bestMatches","renderCompanyList","map","company","componentDidMount","props","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { CompanySearchForm } from '../components/CompanySearchForm';\nimport CompanyCard from '../components/CompanyCard';\nimport { connect } from 'react-redux'\nimport { getPortfolio } from '../redux/actionCreator'\n\n// Have to figure out how to get routed page to render.\n\nconst apiKey = process.env.API_KEY;\n\nclass CompanySearchContainer extends Component {\n    state = {\n          symbol: \"\",\n          searchResultsList: [],\n          validated: false,\n          initialRender: false\n    }\n\n    renderCompanyList() {\n        return (\n            <>\n                {this.state.searchResultsList.map((company) => (\n                    <CompanyCard \n                        key={uuidv4()}\n                        id={uuidv4()}\n                        companySymbol={company[\"1. symbol\"]} \n                        companyName={company[\"2. name\"]}\n                        companyType={company[\"3. type\"]}\n                        companyRegion={company[\"4. region\"]}\n                        companyCurrency={company[\"8. currency\"]}\n                        // company={company[\"1. symbol\"]}\n                    />\n                ))}\n            </>\n        )\n    }\n\n    componentDidMount() {\n        if (this.state.initialRender === false) {\n            this.props.getPortfolio()\n            this.setState({ initialRender: true })\n        }\n    \n    }\n\n    handleSearchFormChange = event => {\n        this.setState({\n            symbol: event.target.value\n        })\n    }\n\n    handleSearchFormSubmit = event => {\n        const form = event.currentTarget;\n        if (form.checkValidity() === false && this.state.symbol === '') {\n            event.preventDefault();\n            event.stopPropagation();\n\n        } else {\n\n        event.preventDefault();\n        fetch(`https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${this.state.symbol}&apikey=${apiKey}`)\n            .then((res) => res.json())\n            .then(data => {\n                const companies = Object(data.bestMatches);\n                this.setState({ \n                    searchResultsList: companies,\n                    validated: true\n                })\n            })\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <CompanySearchForm \n                    onSubmit={this.handleSearchFormSubmit}\n                    validated={this.state.validated}\n                    value={this.state.symbol}\n                    onChange={this.handleSearchFormChange}\n                />\n                <div>\n                    {this.renderCompanyList()}\n                </div>\n            </>\n        );\n    };\n}\n\nexport default connect(null, {getPortfolio}) (CompanySearchContainer)"]},"metadata":{},"sourceType":"module"}