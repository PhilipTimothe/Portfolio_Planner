{"ast":null,"code":"import _toConsumableArray from\"/Users/Philip/Desktop/FlatIron/Projects/Portfolio_Planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/Philip/Desktop/FlatIron/Projects/Portfolio_Planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{v4 as uuidv4}from'uuid';var initialState={currentCompany:{},currentPortfolio:[]};export var reducer=function reducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case\"GET_COMPANY\":return _objectSpread(_objectSpread({},state),{},{currentCompany:_objectSpread({id:uuidv4()},action.payload.company)});case\"GET_PORTFOLIO\":var companies=[].concat(_toConsumableArray(state.currentPortfolio),[action.payload.company]);var result=Array.from(new Set(companies.map(function(s){return s.id;}))).map(function(id){return{id:id,Name:companies.find(function(s){return s.id===id;}).Name,Symbol:companies.find(function(s){return s.id===id;}).Symbol,Industry:companies.find(function(s){return s.id===id;}).Industry,Country:companies.find(function(s){return s.id===id;}).Country};});return _objectSpread(_objectSpread({},state),{},{currentPortfolio:result});case\"SET_PORTFOLIO\":return _objectSpread({},state);case\"DELETE_COMPANY\":return _objectSpread(_objectSpread({},state),{},{currentPortfolio:_toConsumableArray(state.currentPortfolio.filter(function(company){return company[\"id\"]!==action.payload.companyId;}))});default:return _objectSpread({},state);}};","map":{"version":3,"sources":["/Users/Philip/Desktop/FlatIron/Projects/Portfolio_Planner/src/redux/reducer.js"],"names":["v4","uuidv4","initialState","currentCompany","currentPortfolio","reducer","state","action","type","id","payload","company","companies","result","Array","from","Set","map","s","Name","find","Symbol","Industry","Country","filter","companyId"],"mappings":"uWAAA,OAASA,EAAE,GAAIC,CAAAA,MAAf,KAA6B,MAA7B,CAEA,GAAMC,CAAAA,YAAY,CAAG,CACjBC,cAAc,CAAE,EADC,CAEjBC,gBAAgB,CAAE,EAFD,CAArB,CAKA,MAAO,IAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAkC,IAAjCC,CAAAA,KAAiC,2DAAzBJ,YAAyB,IAAXK,CAAAA,MAAW,2CACrD,OAAOA,MAAM,CAACC,IAAd,EACI,IAAK,aAAL,CACI,sCACOF,KADP,MACcH,cAAc,gBAAGM,EAAE,CAAER,MAAM,EAAb,EAAoBM,MAAM,CAACG,OAAP,CAAeC,OAAnC,CAD5B,GAIJ,IAAK,eAAL,CACI,GAAMC,CAAAA,SAAS,8BAAON,KAAK,CAACF,gBAAb,GAA+BG,MAAM,CAACG,OAAP,CAAeC,OAA9C,EAAf,CACA,GAAME,CAAAA,MAAM,CAAGC,KAAK,CAACC,IAAN,CAAW,GAAIC,CAAAA,GAAJ,CAAQJ,SAAS,CAACK,GAAV,CAAc,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACT,EAAN,EAAf,CAAR,CAAX,EACVQ,GADU,CACN,SAAAR,EAAE,CAAI,CACP,MAAO,CACHA,EAAE,CAAEA,EADD,CAEHU,IAAI,CAAEP,SAAS,CAACQ,IAAV,CAAe,SAAAF,CAAC,QAAIA,CAAAA,CAAC,CAACT,EAAF,GAASA,EAAb,EAAhB,EAAiCU,IAFpC,CAGHE,MAAM,CAAET,SAAS,CAACQ,IAAV,CAAe,SAAAF,CAAC,QAAIA,CAAAA,CAAC,CAACT,EAAF,GAASA,EAAb,EAAhB,EAAiCY,MAHtC,CAIHC,QAAQ,CAAEV,SAAS,CAACQ,IAAV,CAAe,SAAAF,CAAC,QAAIA,CAAAA,CAAC,CAACT,EAAF,GAASA,EAAb,EAAhB,EAAiCa,QAJxC,CAKHC,OAAO,CAAEX,SAAS,CAACQ,IAAV,CAAe,SAAAF,CAAC,QAAIA,CAAAA,CAAC,CAACT,EAAF,GAASA,EAAb,EAAhB,EAAiCc,OALvC,CAAP,CAQH,CAVU,CAAf,CAWA,sCACOjB,KADP,MACcF,gBAAgB,CAAES,MADhC,GAIJ,IAAK,eAAL,CACI,wBACOP,KADP,EAIJ,IAAK,gBAAL,CAEI,sCACOA,KADP,MACcF,gBAAgB,oBAAME,KAAK,CAACF,gBAAN,CAAuBoB,MAAvB,CAA8B,SAAAb,OAAO,QAAIA,CAAAA,OAAO,CAAC,IAAD,CAAP,GAAkBJ,MAAM,CAACG,OAAP,CAAee,SAArC,EAArC,CAAN,CAD9B,GAKJ,QAAS,wBAAWnB,KAAX,EAnCb,CAsCH,CAvCM","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\nconst initialState = {\n    currentCompany: {},\n    currentPortfolio: [],\n}\n\nexport const reducer = (state = initialState, action) => {\n    switch(action.type) {\n        case \"GET_COMPANY\":\n            return {\n                ...state, currentCompany: {id: uuidv4(), ...action.payload.company},\n            }\n\n        case \"GET_PORTFOLIO\":\n            const companies = [...state.currentPortfolio, action.payload.company]\n            const result = Array.from(new Set(companies.map(s => s.id)))\n                .map(id => {\n                    return {\n                        id: id,\n                        Name: companies.find(s => s.id === id).Name,\n                        Symbol: companies.find(s => s.id === id).Symbol,\n                        Industry: companies.find(s => s.id === id).Industry,\n                        Country: companies.find(s => s.id === id).Country\n\n                    };\n                });\n            return {\n                ...state, currentPortfolio: result\n            }    \n\n        case \"SET_PORTFOLIO\":\n            return {\n                ...state\n            }\n\n        case \"DELETE_COMPANY\":\n\n            return {\n                ...state, currentPortfolio: [...state.currentPortfolio.filter(company => company[\"id\"] !== action.payload.companyId)]\n            }\n\n\n        default: return {...state}\n\n    }\n}"]},"metadata":{},"sourceType":"module"}