{"ast":null,"code":"import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _classCallCheck from\"/Users/Philip/Desktop/FlatIron/Projects/Portfolio_Planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/Philip/Desktop/FlatIron/Projects/Portfolio_Planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/Philip/Desktop/FlatIron/Projects/Portfolio_Planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/Philip/Desktop/FlatIron/Projects/Portfolio_Planner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from\"react\";import{Line}from'react-chartjs-2';var apiKey=process.env.API_KEY;var CompanyChartContainer=/*#__PURE__*/function(_Component){_inherits(CompanyChartContainer,_Component);var _super=_createSuper(CompanyChartContainer);function CompanyChartContainer(){var _this;_classCallCheck(this,CompanyChartContainer);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={chartData:{labels:[],datasets:[{label:'100 Day, Daily Historical Data',data:[],fill:false,backgroundColor:'rgb(54, 162, 235)',borderColor:'rgba(54, 162, 235, 0.2)'}]},chartOptions:{scales:{yAxes:[{ticks:{beginAtZero:false}}]}}};return _this;}_createClass(CompanyChartContainer,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;var id=this.props.id;if(!id){return;}fetch(\"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=\".concat(id,\"&apikey=\").concat(apiKey)).then(function(res){return res.json();}).then(function(data){var objectKeys=Object.keys(data[\"Time Series (Daily)\"]).slice(0,30).sort(function(a,b){return a>b?1:-1;});var objectData=Object.values(data[\"Time Series (Daily)\"]);var mappedData=objectData.map(function(closeData){return closeData[\"4. close\"];}).slice(0,30).reverse();_this2.setState({chartData:{labels:objectKeys,datasets:[{label:'30 Day Historical Data',data:mappedData,fill:false,backgroundColor:'rgb(54, 162, 235)',borderColor:'rgba(54, 162, 235, 0.2)'}]}});});}},{key:\"render\",value:function render(){return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(Line,{data:this.state.chartData,options:this.state.chartOptions})});}}]);return CompanyChartContainer;}(Component);export{CompanyChartContainer as default};","map":{"version":3,"sources":["/Users/Philip/Desktop/FlatIron/Projects/Portfolio_Planner/src/containers/CompanyChartContainer.js"],"names":["React","Component","Line","apiKey","process","env","API_KEY","CompanyChartContainer","state","chartData","labels","datasets","label","data","fill","backgroundColor","borderColor","chartOptions","scales","yAxes","ticks","beginAtZero","id","props","fetch","then","res","json","objectKeys","Object","keys","slice","sort","a","b","objectData","values","mappedData","map","closeData","reverse","setState"],"mappings":"gxBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,IAAT,KAAqB,iBAArB,CAEA,GAAMC,CAAAA,MAAM,CAAGC,OAAO,CAACC,GAAR,CAAYC,OAA3B,C,GAEqBC,CAAAA,qB,uXACbC,K,CAAQ,CACJC,SAAS,CAAE,CACPC,MAAM,CAAE,EADD,CAEPC,QAAQ,CAAE,CACN,CACIC,KAAK,CAAE,gCADX,CAEIC,IAAI,CAAE,EAFV,CAGIC,IAAI,CAAE,KAHV,CAIIC,eAAe,CAAE,mBAJrB,CAKIC,WAAW,CAAE,yBALjB,CADM,CAFH,CADP,CAaJC,YAAY,CAAE,CACVC,MAAM,CAAE,CACJC,KAAK,CAAE,CACH,CACIC,KAAK,CAAE,CACHC,WAAW,CAAE,KADV,CADX,CADG,CADH,CADE,CAbV,C,8GA0BQ,oBACRC,CAAAA,EADQ,CACD,KAAKC,KADJ,CACRD,EADQ,CAGhB,GAAI,CAACA,EAAL,CAAS,CACT,OACC,CAEGE,KAAK,+EAAwEF,EAAxE,oBAAqFnB,MAArF,EAAL,CACCsB,IADD,CACM,SAACC,GAAD,QAASA,CAAAA,GAAG,CAACC,IAAJ,EAAT,EADN,EAECF,IAFD,CAEM,SAACZ,IAAD,CAAU,CACZ,GAAMe,CAAAA,UAAU,CAAIC,MAAM,CAACC,IAAP,CAAYjB,IAAI,CAAC,qBAAD,CAAhB,CAAD,CAA2CkB,KAA3C,CAAiD,CAAjD,CAAmD,EAAnD,EAAuDC,IAAvD,CAA4D,SAACC,CAAD,CAAGC,CAAH,QAASD,CAAAA,CAAC,CAAGC,CAAJ,CAAQ,CAAR,CAAY,CAAC,CAAtB,EAA5D,CAAnB,CACA,GAAMC,CAAAA,UAAU,CAAIN,MAAM,CAACO,MAAP,CAAcvB,IAAI,CAAC,qBAAD,CAAlB,CAApB,CACA,GAAMwB,CAAAA,UAAU,CAAGF,UAAU,CAACG,GAAX,CAAe,SAACC,SAAD,QAAeA,CAAAA,SAAS,CAAC,UAAD,CAAxB,EAAf,EAAqDR,KAArD,CAA2D,CAA3D,CAA6D,EAA7D,EAAiES,OAAjE,EAAnB,CAEA,MAAI,CAACC,QAAL,CAAc,CACVhC,SAAS,CAAE,CACPC,MAAM,CAAEkB,UADD,CAEPjB,QAAQ,CAAE,CACN,CACIC,KAAK,CAAE,wBADX,CAEIC,IAAI,CAAEwB,UAFV,CAGIvB,IAAI,CAAE,KAHV,CAIIC,eAAe,CAAE,mBAJrB,CAKIC,WAAW,CAAE,yBALjB,CADM,CAFH,CADD,CAAd,EAcH,CArBD,EAsBP,C,uCAEQ,CACL,mBACI,sCACK,KAAC,IAAD,EAAM,IAAI,CAAE,KAAKR,KAAL,CAAWC,SAAvB,CAAkC,OAAO,CAAE,KAAKD,KAAL,CAAWS,YAAtD,EADL,EADJ,CAKH,C,mCAhE8ChB,S,SAA9BM,qB","sourcesContent":["import React, { Component } from \"react\";\nimport { Line } from 'react-chartjs-2';\n\nconst apiKey = process.env.API_KEY;\n\nexport default class CompanyChartContainer extends Component {\n        state = {\n            chartData: {\n                labels: [],\n                datasets: [\n                    {\n                        label: '100 Day, Daily Historical Data',\n                        data: [],\n                        fill: false,\n                        backgroundColor: 'rgb(54, 162, 235)',\n                        borderColor: 'rgba(54, 162, 235, 0.2)',\n                    },\n                ],\n            },\n            chartOptions: {\n                scales: {\n                    yAxes: [\n                        {\n                            ticks: {\n                                beginAtZero: false,\n                            },\n                        },\n                    ],\n                },\n            }\n    }\n\n    componentDidMount() {\n        const { id } = this.props;\n\n        if (!id) {\n        return;\n        }\n\n            fetch(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${id}&apikey=${apiKey}`)\n            .then((res) => res.json())\n            .then((data) => {\n                const objectKeys = (Object.keys(data[\"Time Series (Daily)\"])).slice(0,30).sort((a,b)=> (a > b ? 1 : -1))\n                const objectData = (Object.values(data[\"Time Series (Daily)\"]))\n                const mappedData = objectData.map((closeData) => closeData[\"4. close\"]).slice(0,30).reverse()\n\n                this.setState({ \n                    chartData: {\n                        labels: objectKeys,\n                        datasets: [\n                            {\n                                label: '30 Day Historical Data',\n                                data: mappedData,\n                                fill: false,\n                                backgroundColor: 'rgb(54, 162, 235)',\n                                borderColor: 'rgba(54, 162, 235, 0.2)',\n                            },\n                        ]\n                    }\n                })\n            })\n    }\n\n    render() {\n        return (\n            <>\n                {<Line data={this.state.chartData} options={this.state.chartOptions} />}\n            </>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}